# -*- mode: ruby -*-
# vi: set ft=ruby :

# Copyright 2019, Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'yaml'

def local_cache(basebox_name)
  user_data_path = Vagrant.user_data_path.to_s
  File.join(user_data_path, 'cache', 'apt', basebox_name)
end

# load the vm topology profile
topology = './topology/topology.yml'
topology_overrides = './topology/topology.overrides.yml'

if File.file?(File.expand_path(topology_overrides))
  topology = YAML.load_file(File.expand_path(topology_overrides))
elsif File.file?(File.expand_path(topology))
  topology = YAML.load_file(File.expand_path(topology))
else
  raise "#{topology} or #{topology_overrides} not found"
end

# load the hardware profiles
hardware = './topology/hardware.yml'
hardware_overrides = './topology/hardware.overrides.yml'

if File.file?(File.expand_path(hardware_overrides))
  hardware = YAML.load_file(File.expand_path(hardware_overrides))
elsif File.file?(File.expand_path(hardware))
  hardware = YAML.load_file(File.expand_path(hardware))
else
  raise "#{hardware} or #{hardware_overrides} not found"
end

project_name = '/' + File.basename(File.dirname(Dir.getwd))
vb_folder = `VBoxManage list systemproperties | grep 'Default machine folder'`
vb_folder = vb_folder.match(/^Default machine folder:\s+(.+)$/)[1]

Vagrant.configure('2') do |config|
  config.ssh.forward_x11 = true
  config.vm.box = 'bento/ubuntu-18.04'
  config.vm.box_download_insecure = true
  cache_dir = local_cache(config.vm.box)
  config.vm.synced_folder cache_dir, '/var/cache/apt/archives', create: true

  topology['nodes'].each do |node|
    vm_name = node['host']
    # get hardware profile for node
    hw_profiles = hardware['profiles']
    hw_profile = hw_profiles[node['hardware_profile']]

    config.vm.define vm_name do |subconfig|
      # vm provisioners starts

      # create default user
      subconfig.vm.provision 'shell' do |shell|
        shell.path = 'provisioners/create-default-user.sh'
        shell.args = 'ubuntu 53cr37'
      end

      # modify the vagrant user
      subconfig.vm.provision 'shell' do |shell|
        shell.path = 'provisioners/modify-vagrant-user.sh'
      end

      # vm provisioners ends

      # add swap space
      if hw_profile.key?('swap_gb')
        subconfig.vm.provision 'shell' do |s|
          s.path = 'provisioners/swap.sh'
          s.args = hw_profile['swap_gb']
        end
      end

      # network connections
      #
      host_vars = node['host_vars']
      transit = host_vars['interfaces']['transit']

      transit.each do |t_iface|
        args = {}.tap do |a|
          a[:virtualbox__intnet] = t_iface['neighbor']['name']
          a[:nic_type] = '82543GC'
          a[:auto_config] = false
          a[:mac] = t_iface['mac'].delete(':')
        end

        subconfig.vm.network('private_network', args)
      end

      subconfig.vm.provider 'virtualbox' do |vb|
        vb.name = vm_name
        vb.cpus = hw_profile['cpus']
        vb.memory = hw_profile['ram_gb'] * 1024
        vb.customize ['modifyvm', :id, '--groups', project_name]
        vb.customize ['modifyvm', :id, '--uart1', '0x3F8', '4']
        vb.customize ['modifyvm', :id, '--uart2', '0x2F8', '3']
        vb.customize ['modifyvm', :id, '--uartmode1', 'disconnected']
        vb.customize ['modifyvm', :id, '--uartmode2', 'disconnected']
        vb.customize ['modifyvm', :id, '--vram', '16']

        # add additional hard drives
        if hw_profile.key?('ext_disks')

          size_gb = hw_profile['ext_disks']['size_gb']
          count = hw_profile['ext_disks']['count']
          drive_letters = ('a'..'z').to_a[1..count]

          drive_letters.each_with_index do |l, i|
            drive_file = "sd#{l}.vdi"
            drive_fp = File.join(vb_folder, project_name, vm_name, drive_file)

            next if File.exist?(drive_fp)

            drive_port = i + 1

            vb.customize [
              'createhd',
              '--filename', drive_fp,
              '--size', size_gb * 1024
            ]

            vb.customize [
              'storageattach', :id,
              '--storagectl', 'SATA Controller',
              '--type', 'hdd',
              '--device', 0,
              '--port', drive_port,
              '--medium', drive_fp
            ]
          end
        end
      end
    end
  end
end
